import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  ArrowLeft, 
  Scan, 
  AlertTriangle, 
  CheckCircle, 
  Lightbulb, 
  Copy,
  Download,
  ExternalLink,
  Code2,
  TrendingUp
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface ScanResultsProps {
  results: any;
  onNewScan: () => void;
  onBack: () => void;
}

const ScanResults = ({ results, onNewScan, onBack }: ScanResultsProps) => {
  const { toast } = useToast();
  const [selectedIssue, setSelectedIssue] = useState(0);

  const getIssueIcon = (type: string) => {
    switch (type) {
      case "unsafe":
        return <AlertTriangle className="h-4 w-4 text-destructive" />;
      case "warning":
        return <AlertTriangle className="h-4 w-4 text-warning" />;
      default:
        return <CheckCircle className="h-4 w-4 text-accent" />;
    }
  };

  const getIssueColor = (type: string) => {
    switch (type) {
      case "unsafe":
        return "destructive";
      case "warning":
        return "secondary";
      default:
        return "default";
    }
  };

  const copyCode = (code: string) => {
    navigator.clipboard.writeText(code);
    toast({
      title: "Code copied!",
      description: "The suggested code has been copied to your clipboard.",
    });
  };

  const generateReport = () => {
    const report = `
# Baseline Feature Advisor - Scan Report

## Summary
- Total APIs Analyzed: ${results.totalAPIs}
- Unsafe APIs: ${results.unsafeAPIs}
- Warnings: ${results.warnings}
- Safe APIs: ${results.safe}

## Issues Found

${results.issues.map((issue: any, index: number) => `
### ${index + 1}. ${issue.api} (Line ${issue.line})
**Type:** ${issue.type.toUpperCase()}
**Description:** ${issue.description}

**Suggested Alternative:**
\`\`\`javascript
${issue.suggestion.code}
\`\`\`
**Browser Support:** ${issue.suggestion.support}
`).join('\n')}

Generated by Baseline Feature Advisor
    `.trim();

    const blob = new Blob([report], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'baseline-scan-report.md';
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Report generated!",
      description: "The scan report has been downloaded as a Markdown file.",
    });
  };

  return (
    <div className="min-h-screen bg-gradient-hero p-6">
      <div className="max-w-7xl mx-auto">
        <div className="flex items-center justify-between mb-8">
          <Button 
            variant="ghost" 
            onClick={onBack}
            className="hover:bg-secondary/50"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Home
          </Button>
          
          <div className="flex items-center space-x-4">
            <Button 
              variant="outline"
              onClick={generateReport}
              className="border-primary/20 hover:border-primary/40"
            >
              <Download className="h-4 w-4 mr-2" />
              Download Report
            </Button>
            <Button 
              onClick={onNewScan}
              className="bg-gradient-primary hover:shadow-glow transition-all duration-300"
            >
              <Scan className="h-4 w-4 mr-2" />
              New Scan
            </Button>
          </div>
        </div>

        {/* Results Summary */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <Card className="p-6 bg-card/50 backdrop-blur-sm border-border/50 text-center">
            <div className="text-2xl font-bold text-foreground">{results.totalAPIs}</div>
            <div className="text-sm text-muted-foreground">APIs Analyzed</div>
          </Card>
          <Card className="p-6 bg-card/50 backdrop-blur-sm border-destructive/20 text-center">
            <div className="text-2xl font-bold text-destructive">{results.unsafeAPIs}</div>
            <div className="text-sm text-muted-foreground">Unsafe APIs</div>
          </Card>
          <Card className="p-6 bg-card/50 backdrop-blur-sm border-warning/20 text-center">
            <div className="text-2xl font-bold text-warning">{results.warnings}</div>
            <div className="text-sm text-muted-foreground">Warnings</div>
          </Card>
          <Card className="p-6 bg-card/50 backdrop-blur-sm border-accent/20 text-center">
            <div className="text-2xl font-bold text-accent">{results.safe}</div>
            <div className="text-sm text-muted-foreground">Safe APIs</div>
          </Card>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Issues List */}
          <Card className="p-6 bg-card/50 backdrop-blur-sm border-border/50">
            <h3 className="text-lg font-semibold mb-4 flex items-center">
              <AlertTriangle className="h-5 w-5 mr-2 text-warning" />
              Detected Issues
            </h3>
            <div className="space-y-3">
              {results.issues.map((issue: any, index: number) => (
                <div 
                  key={index}
                  className={`p-3 rounded-lg border cursor-pointer transition-all duration-200 ${
                    selectedIssue === index 
                      ? 'border-primary bg-primary/5' 
                      : 'border-border/50 hover:border-border'
                  }`}
                  onClick={() => setSelectedIssue(index)}
                >
                  <div className="flex items-start space-x-3">
                    {getIssueIcon(issue.type)}
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center space-x-2 mb-1">
                        <code className="text-sm font-mono bg-muted/50 px-2 py-1 rounded">
                          {issue.api}
                        </code>
                        <Badge variant={getIssueColor(issue.type) as any} className="text-xs">
                          Line {issue.line}
                        </Badge>
                      </div>
                      <p className="text-xs text-muted-foreground">{issue.description}</p>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </Card>

          {/* Issue Details */}
          <div className="lg:col-span-2 space-y-6">
            {results.issues[selectedIssue] && (
              <>
                <Card className="p-6 bg-card/50 backdrop-blur-sm border-border/50">
                  <div className="flex items-center space-x-3 mb-4">
                    {getIssueIcon(results.issues[selectedIssue].type)}
                    <h3 className="text-lg font-semibold">{results.issues[selectedIssue].api}</h3>
                    <Badge variant={getIssueColor(results.issues[selectedIssue].type) as any}>
                      {results.issues[selectedIssue].type.toUpperCase()}
                    </Badge>
                  </div>
                  
                  <p className="text-muted-foreground mb-6">{results.issues[selectedIssue].description}</p>

                  <Tabs defaultValue="suggestion" className="w-full">
                    <TabsList className="grid w-full grid-cols-2">
                      <TabsTrigger value="suggestion" className="flex items-center">
                        <Lightbulb className="h-4 w-4 mr-2" />
                        AI Suggestion
                      </TabsTrigger>
                      <TabsTrigger value="compatibility" className="flex items-center">
                        <TrendingUp className="h-4 w-4 mr-2" />
                        Compatibility
                      </TabsTrigger>
                    </TabsList>
                    
                    <TabsContent value="suggestion" className="mt-4">
                      <div className="space-y-4">
                        <div>
                          <h4 className="font-medium text-accent mb-2">Recommended Alternative:</h4>
                          <p className="text-sm text-muted-foreground mb-3">
                            {results.issues[selectedIssue].suggestion.modern}
                          </p>
                        </div>
                        
                        <div className="relative">
                          <div className="flex items-center justify-between mb-2">
                            <h4 className="font-medium flex items-center">
                              <Code2 className="h-4 w-4 mr-2" />
                              Suggested Code:
                            </h4>
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => copyCode(results.issues[selectedIssue].suggestion.code)}
                              className="border-primary/20 hover:border-primary/40"
                            >
                              <Copy className="h-3 w-3 mr-1" />
                              Copy
                            </Button>
                          </div>
                          <pre className="bg-muted/30 border border-border/50 rounded-lg p-4 text-sm font-mono overflow-x-auto">
                            <code className="text-syntax-string">{results.issues[selectedIssue].suggestion.code}</code>
                          </pre>
                        </div>
                      </div>
                    </TabsContent>
                    
                    <TabsContent value="compatibility" className="mt-4">
                      <div className="space-y-4">
                        <div>
                          <h4 className="font-medium mb-2 flex items-center">
                            <CheckCircle className="h-4 w-4 mr-2 text-accent" />
                            Browser Support:
                          </h4>
                          <Badge variant="outline" className="border-accent/20 text-accent">
                            {results.issues[selectedIssue].suggestion.support}
                          </Badge>
                        </div>
                        
                        <div className="bg-muted/20 border border-border/50 rounded-lg p-4">
                          <div className="flex items-center space-x-2 mb-2">
                            <ExternalLink className="h-4 w-4 text-primary" />
                            <span className="font-medium">Learn More</span>
                          </div>
                          <p className="text-sm text-muted-foreground">
                            Check MDN Web Docs and Can I Use for detailed browser compatibility information.
                          </p>
                        </div>
                      </div>
                    </TabsContent>
                  </Tabs>
                </Card>
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ScanResults;